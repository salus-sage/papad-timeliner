'use strict';

exports.__esModule = true;

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright (c) 2017-present, Digirati Limited.
 * All rights reserved.
 */

var Element = function () {
  function Element(name) {
    _classCallCheck(this, Element);

    this.name = name;
  }

  Element.prototype.modifier = function modifier(m, c) {
    if (m.toString() === '[object Object]') return this.ms(m);
    if (!c && c !== undefined) {
      return this.name;
    }
    return this.name + ' ' + this.name + '--' + m;
  };

  Element.prototype.m = function m(_m, c) {
    this.modifier(_m, c);
  };

  Element.prototype.modifiers = function modifiers(m) {
    var join = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    var ms = [this.name];
    for (var k in m) {
      if (m.hasOwnProperty(k) && m[k]) {
        ms.push(this.name + '--' + k);
      }
    }
    return join ? ms.join(' ') : ms;
  };

  Element.prototype.ms = function ms(m, join) {
    this.modifiers(m, join);
  };

  Element.prototype.toString = function toString() {
    return this.name;
  };

  return Element;
}();

var Block = function (_Element) {
  _inherits(Block, _Element);

  function Block() {
    var _temp, _this, _ret;

    _classCallCheck(this, Block);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Element.call.apply(_Element, [this].concat(args))), _this), _this.e = _this.element, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Block.prototype.element = function element(name) {
    return new Element(this.name + '__' + name);
  };

  return Block;
}(Element);

var BEM = {
  block: function block(blockName) {
    // Block.
    return new Block(blockName);
  }
};

BEM.b = BEM.block;

exports.default = BEM;
module.exports = exports['default'];