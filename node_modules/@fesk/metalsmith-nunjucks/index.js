const nunjucks = require('nunjucks');
const defaultConfig = require('./lib/configuration');
const ignoreFrontMatter = require('./lib/utils/ignore-front-matter');
const getLayouts = require('./lib/utils/get-layouts');
const getPages = require('./lib/utils/get-pages');
const validateLayouts = require('./lib/validation/layouts');
const configureNunjucks = require('./lib/nunjucks/configure');
const configureNodeLoader = require('./lib/nunjucks/configure-node-loader');
const renderTemplate = require('./lib/nunjucks/render');
const compileTemplate = require('./lib/nunjucks/compile');
const editFileContents = require('./lib/utils/edit-file-contents');
const editFileName = require('./lib/utils/edit-file-name');
const compileDependencies = require('./lib/nunjucks/compile-dependencies');

function nunjucksPlugin(config) {
  const configuration = {
    ...defaultConfig,
    ...config,
    nunjucks: {
      ...defaultConfig.nunjucks,
      ...(config.nunjucks || {}),
    },
  };

  return function(files, metalsmith, done) {
    const { defaultLayout, staticLayout } = configuration;

    const nodeLoader = configureNodeLoader(
      configuration.nunjucks,
      metalsmith._source
    );

    const layouts = getLayouts(
      files,
      nodeLoader,
      configuration.layouts,
      configuration.defaultLayout,
      configuration.staticLayout,
      configuration.fallback
    );

    // Validate that layouts fit our rules.
    validateLayouts(layouts, { defaultLayout, staticLayout });

    // get all the pages based on configuration and configure nunjucks.
    const pages = getPages(files, configuration.pages, configuration.layouts);
    const engine = configureNunjucks(
      nunjucks,
      configuration.nunjucks,
      metalsmith._source,
      [nodeLoader]
    );

    // Start rendering each template, returning mutations to make to files.
    const renameOps = Object.keys(pages).map(page => {
      const file = files[page];

      // This is rendering twig files, not HTML.
      if (configuration.skipRender) {
        const compiled = compileTemplate({
          engine,
          file,
          fileName: page,
          layouts,
          defaultLayout,
          staticLayout,
          context: { ...metalsmith.metadata(), ...file, files },
        });

        return () => {
          editFileContents(
            files,
            page,
            configuration.compileDependencies
              ? compileDependencies(
                  files,
                  nodeLoader,
                  compiled.fileString,
                  page
                )
              : compiled.fileString
          );
        };
      }

      const text = renderTemplate({
        engine,
        file,
        fileName: page,
        layouts,
        defaultLayout,
        staticLayout,
        context: { ...metalsmith.metadata(), ...file, files },
      });

      // defer any mutations until we've processed everything.
      return () => {
        editFileContents(files, page, text);
        editFileName(files, page, page.replace(/\.[^/.]+$/, '.html'));
      };
    });

    // Rename step, keeps the contexts the same for all files being rendered.
    renameOps.forEach(op => op());

    if (configuration.skipRender) {
      Object.values(layouts).forEach(layout => {
        const fileString = ignoreFrontMatter(layout.file.contents.toString());
        editFileContents(
          files,
          layout.fileName,
          configuration.compileDependencies
            ? compileDependencies(
                files,
                nodeLoader,
                fileString,
                layout.fileName
              )
            : fileString
        );
      });
    } else {
      // Removes layouts from build.
      Object.values(layouts)
        .map(layout => layout.fileName)
        .forEach(layoutName => {
          if (files[layoutName]) {
            files[layoutName] = null;
            delete files[layoutName];
          }
        });
    }

    done();
  };
}

module.exports = nunjucksPlugin;
