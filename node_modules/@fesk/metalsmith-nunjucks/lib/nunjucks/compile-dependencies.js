const path = require('path');
const ignoreFrontMatter = require('../utils/ignore-front-matter');
const getImports = require('./template-get-imports');
const editFileContents = require('../utils/edit-file-contents');
const hashName = require('../utils/hash-name');

function resolveSource(nodeLoader, from, to) {
  try {
    return nodeLoader.getSource(nodeLoader.resolve(path.dirname(from), to));
  } catch (err) {
    return nodeLoader.getSource(to);
  }
}

function compileDependencies(files, nodeLoader, fileString, fileName) {
  const dependencies = getImports(fileString);
  let newFileString = fileString;
  dependencies.map(depFile => {
    if (!files[depFile]) {
      const dep = resolveSource(nodeLoader, fileName, depFile);
      const key = path.relative(process.cwd(), dep.path);
      if (dep) {
        const newName = hashName(depFile, key);
        // Cheap string replace.
        newFileString = newFileString.split(depFile).join(newName);
        // Add dependency.
        editFileContents(
          files,
          newName,
          compileDependencies(files, nodeLoader, dep.src, depFile)
        );
      }
    }
  });
  return newFileString;
}

module.exports = compileDependencies;
