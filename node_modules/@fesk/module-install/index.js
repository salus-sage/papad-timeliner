const parse = require('parse-package-name');
const isLernaPackage = require('./lib/is-lerna-package');
const isLocalPackage = require('./lib/is-local-package');
const addToPackageJson = require('./lib/add-to-package-json');
const runLernaLink = require('./lib/run-lerna-link');
const getLernaJson = require('./lib/get-lerna-json');
const runYarnAdd = require('./lib/run-yarn-add');
const runNpmInstall = require('./lib/run-npm-install');
const isRunWithYarn = require('./lib/is-run-with-yarn');
const ora = require('ora');

async function moduleInstall(name, configuration) {
  const config = Object.assign(
    {
      dev: false,
      packagePath: process.cwd(),
      log: true,
    },
    configuration
  );

  // @todo batch these up properly.
  if (Array.isArray(name)) {
    for (let singleName of name) {
      await moduleInstall(singleName, configuration);
    }
    return;
  }

  const pkg = parse(name);
  const packageName = pkg.name;
  const packageVersion = pkg.version || '*';
  const spinner = config.log ? ora(`Installing ${name}`).start() : null;

  if (await isLernaPackage(config.packagePath)) {
    if (spinner) {
      spinner.info('Detected lerna project').start('Detecting package type');
    }

    if (await isLocalPackage(packageName)) {
      if (spinner) {
        spinner
          .info('Detected local lerna package')
          .start('Adding to package.json + running lerna link');
      }

      await addToPackageJson(packageName, packageVersion, config);
      await runLernaLink(config.packageName);
      // Run lerna link.
      if (spinner) {
        spinner.succeed(`Successfully installed ${name}`);
      }
      return;
    }
    const lernaJson = getLernaJson();
    if (lernaJson.npmClient === 'yarn') {
      if (spinner) {
        spinner.info('Detected yarn workspaces').start('Running yarn add');
      }
      await runYarnAdd(name, configuration);
      // run yarn add
      if (spinner) {
        spinner.succeed(`Successfully installed ${name}`);
      }
      return;
    }
  }

  if (isRunWithYarn) {
    if (spinner) {
      spinner.info('Detected Yarn').start('Running Yarn add');
    }
    await runYarnAdd(name, configuration);
  } else {
    if (spinner) {
      spinner.info('Detected NPM package').start('Running NPM install');
    }

    await runNpmInstall(name, configuration);
  }

  if (spinner) {
    spinner.succeed(`Successfully installed ${name}`);
  }
}

module.exports = moduleInstall;
