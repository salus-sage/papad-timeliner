const fs = require('fs');
const path = require('path');
const markdown = require('metalsmith-markdown');
const metalsmithPrism = require('metalsmith-prism');
const twigTransform = require('metalsmith-twig-transform');
const permalinks = require('metalsmith-permalinks');
const manifest = require('metalsmith-webpack-manifest');
const paths = require('metalsmith-paths');
const atomicCollections = require('metalsmith-atomic-design/lib/atomic-collections');
const markdownHeadings = require('metalsmith-headings-identifier');

function readDir(dirPath) {
  return fs
    .readdirSync(dirPath)
    .filter(f => fs.statSync(path.join(dirPath, f)).isDirectory());
}

function removeNumber(file) {
  return file.replace(/\d\d-/g, '');
}

function removeNumbers() {
  return files => {
    Object.keys(files).forEach(file => {
      if (file.match(/^\d\d-/)) {
        const newPath = removeNumber(file);
        files[newPath] = files[file];
        files[newPath].paths = path.parse(newPath);
        delete files[file];
      }
    });
  };
}

function maybeConfiguration(metadata, source, name = 'config.json') {
  try {
    const config = require(require.resolve(
      path.join(process.cwd(), source, name)
    ));
    return Object.assign(metadata || {}, config);
  } catch (err) {
    return {};
  }
}

module.exports = function(metalsmith, configuration) {
  const config = Object.assign(
    {
      configurationName: 'config.json',
      directoryBlacklist: ['layouts', 'scss'],
    },
    configuration,
    {
      twigTransform: Object.assign(
        {
          pattern: '{**,*}',
          layouts: true,
          defaultLayout: 'layouts/default.twig',
        },
        configuration.twigTransform || {}
      ),
    }
  );

  return metalsmith
    .ignore('scss')
    .metadata(
      maybeConfiguration(
        metalsmith.metadata(),
        metalsmith._source,
        config.configurationName
      )
    )
    .use(manifest(configuration))
    .use(removeNumbers())
    .use(markdown({ langPrefix: 'language-', gfm: true, smartLists: true }))
    .use(markdownHeadings())
    .use(metalsmithPrism({ lineNumbers: true }))
    .use(paths({ property: 'paths' }))
    .use(
      atomicCollections({
        useLib: false,
        structure: readDir(path.join(process.cwd(), metalsmith._source))
          .filter(e => config.directoryBlacklist.indexOf(e) === -1)
          .map(removeNumber),
        ext: 'html',
      })
    )
    .use(files => {
      if (!files['layouts/default.twig']) {
        files['layouts/default.twig'] = {
          mode: '0644',
          contents: fs.readFileSync(
            path.resolve(__dirname, 'lib', 'layouts', 'markdownLayout.twig')
          ),
        };
      }
    })
    .use(
      twigTransform({
        pattern: '{**,*}',
        layouts: true,
        defaultLayout: 'layouts/default.twig',
      })
    )
    .use(permalinks());
};
