const fs = require('fs');
const path = require('path');

function configurePrettyError(prettyError) {
  const pe = prettyError.start();
  pe.skipNodeFiles();
}

function resolveModuleQuiet(name) {
  try {
    return require.resolve(path.join(name, 'fesk-metalsmith.js'));
  } catch (err) {
    return null;
  }
}

function isLernaProject() {
  return fs.existsSync(
    path.resolve(path.join(process.cwd(), '..', '..', 'lerna.json'))
  );
}

function findConfiguration(configName) {
  // Search dest project
  // process.cwd()/.metalsmith/{configName}
  const projectConfig = path.resolve(
    path.join(process.cwd(), '.metalsmith', `${configName}.js`)
  );
  if (fs.existsSync(projectConfig)) {
    return require(projectConfig);
  }

  const userNpmConfig = path.resolve(
    path.join(process.cwd(), 'node_modules', configName, 'fesk-metalsmith.js')
  );
  if (fs.existsSync(userNpmConfig)) {
    return require(userNpmConfig);
  }

  if (isLernaProject()) {
    const lernaNpmConfig = path.resolve(
      path.join(
        process.cwd(),
        '..',
        '..',
        'node_modules',
        configName,
        'fesk-metalsmith.js'
      )
    );

    if (fs.existsSync(lernaNpmConfig)) {
      return require(lernaNpmConfig);
    }
  }

  // Search FESK NPM Namespace
  // process.cwd()/node_modules/{configName}/metalsmith.js
  const feskNpmConfig = path.resolve(
    path.join(
      process.cwd(),
      'node_modules',
      `@fesk/plugin-${configName}`,
      'fesk-metalsmith.js'
    )
  );
  if (fs.existsSync(feskNpmConfig)) {
    return require(feskNpmConfig);
  }

  if (isLernaProject()) {
    const lernaNpmConfig = path.resolve(
      path.join(
        process.cwd(),
        '..',
        '..',
        'node_modules',
        `@fesk/plugin-${configName}`,
        'fesk-metalsmith.js'
      )
    );

    if (fs.existsSync(lernaNpmConfig)) {
      return require(lernaNpmConfig);
    }
  }

  // Search this project NPM
  // ../../node_modules/{configName}/metalsmith.js
  const npmConfig = resolveModuleQuiet(configName);
  if (npmConfig) {
    return require(npmConfig);
  }

  // Search this project
  // ../configs/{configName}.js
  const localConfig = path.resolve(
    path.join(__dirname, 'configs', `${configName}.js`)
  );
  if (fs.existsSync(localConfig)) {
    return require(localConfig);
  }

  console.log(`Configuration ${configName} not found`);
  process.exit(1);
}

module.exports = {
  findConfiguration,
  configurePrettyError,
};
