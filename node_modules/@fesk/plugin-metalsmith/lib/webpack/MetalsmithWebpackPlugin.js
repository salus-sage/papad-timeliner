const manifestToAssets = require('webpack-manifest-parser');

function MetalsmithWebpackPlugin(opts, makeMetalsmithConfig) {
  this.opts = Object.assign(
    {
      config: 'default',
      metalsmithDest: '/assets',
    },
    opts
  );

  this.makeMetalsmithConfig = makeMetalsmithConfig
    ? makeMetalsmithConfig
    : require('../makeConfig.js');
}

function afterEmit(name, compiler, func) {
  if (compiler.hooks && compiler.hooks.afterEmit) {
    return compiler.hooks.afterEmit.tapPromise(
      name,
      compilation =>
        new Promise(callback => {
          func(compilation, callback);
        })
    );
  }

  compiler.plugin('after-emit', (compilation, callback) => {
    func(compilation, callback);
  });
}

MetalsmithWebpackPlugin.prototype.apply = function(compiler) {
  afterEmit('MetalsmithWebpackPlugin', compiler, (compilation, callback) => {
    if (compilation.assets && compilation.assets['manifest.json']) {
      const manifest = JSON.parse(compilation.assets['manifest.json'].source());
      const assets = manifestToAssets(
        manifest,
        this.opts.metalsmithDest,
        file => () => {
          return compilation.assets[file]
            ? compilation.assets[file].source().toString()
            : null;
        }
      );
      this.makeMetalsmithConfig(this.opts.config, process.cwd(), {
        assets,
        callback,
        debug: this.opts.debug,
      }).build(function(err) {
        if (err) throw err;
        callback();
      });
    } else {
      console.log(
        'Metalsmith Plugin requires ManifestPlugin, try running $ npm install webpack-manifest-plugin --save-dev'
      );
    }
  });
};

module.exports = MetalsmithWebpackPlugin;
