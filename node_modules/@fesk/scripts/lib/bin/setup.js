#!/usr/bin/env node
const prompts = require('prompts');
const library = require('../../lib/scripts/parts');
const fs = require('fs');
const chalk = require('chalk');
const path = require('path');
const moduleInstall = require('@fesk/module-install');

(async function() {
  // hello async

  library.banner();

  const alreadyHasWebpack = fs.existsSync(
    path.join(process.cwd(), 'webpack.config.js')
  );

  const alreadyHasEslint = fs.existsSync(
    path.join(process.cwd(), '.eslintrc.js')
  );

  const alreadyHasEslintIgnore = fs.existsSync(
    path.join(process.cwd(), '.eslintignore')
  );

  const alreadyHasPrettier = fs.existsSync(
    path.join(process.cwd(), '.prettierrc')
  );

  const alreadyHasGitignore = fs.existsSync(
    path.join(process.cwd(), '.gitignore')
  );

  const alreadyHasNetlify = fs.existsSync(
    path.join(process.cwd(), 'netlify.toml')
  );

  const questions = [
    false
      ? {
          type: 'multiselect',
          name: 'projectTypes',
          message: 'What type of sites do you want to create?',
          hint: '- Space to select. Return to submit',
          choices: [
            { title: 'Single-page application', value: 'index-page' },
            { title: 'Documentation', value: 'documentation' },
            { title: 'Micro-site', value: 'micro-site' },
            { title: 'Twig templates', value: 'twig-templates' },
          ],
        }
      : null,
    alreadyHasWebpack
      ? null
      : {
          type: 'toggle',
          name: 'createExtendableWebpack',
          message: 'Are you intending to extend the webpack configuration?',
          initial: true,
          active: 'yes',
          inactive: 'no',
        },
    alreadyHasEslint === false ||
    alreadyHasEslintIgnore === false ||
    alreadyHasPrettier === false
      ? {
          type: 'toggle',
          name: 'linting',
          message: 'Add default eslint configuration?',
          initial: true,
          active: 'yes',
          inactive: 'no',
        }
      : null,
    null
      ? {
          type: 'toggle',
          name: 'viewModels',
          message: 'Do you want to create initial view models?',
          initial: false,
          active: 'yes',
          inactive: 'no',
        }
      : false,
  ].filter(Boolean);

  if (questions.length === 0) {
    console.log('Looks like you already have a project set up!');
    process.exit();
  }

  const {
    createExtendableWebpack,
    projectTypes,
    linting,
    viewModels,
    netlify,
  } = await prompts(
    [
      null
        ? {
            type: 'multiselect',
            name: 'projectTypes',
            message: 'What type of sites do you want to create?',
            hint: '- Space to select. Return to submit',
            choices: [
              { title: 'Single-page application', value: 'index-page' },
              { title: 'Documentation', value: 'documentation' },
              { title: 'Micro-site', value: 'micro-site' },
              { title: 'Twig templates', value: 'twig-templates' },
            ],
          }
        : null,
      alreadyHasWebpack
        ? null
        : {
            type: 'toggle',
            name: 'createExtendableWebpack',
            message: 'Are you intending to extend the webpack configuration?',
            initial: false,
            active: 'yes',
            inactive: 'no',
          },
      alreadyHasEslint === false ||
      alreadyHasEslintIgnore === false ||
      alreadyHasPrettier === false
        ? {
            type: 'toggle',
            name: 'linting',
            message: 'Add default eslint configuration?',
            initial: true,
            active: 'yes',
            inactive: 'no',
          }
        : null,
      null
        ? {
            type: 'toggle',
            name: 'viewModels',
            message: 'Do you want to create initial view models?',
            initial: false,
            active: 'yes',
            inactive: 'no',
          }
        : false,
      alreadyHasNetlify === false
        ? {
            type: 'toggle',
            name: 'netlify',
            message: 'Do you want to set up Netlify?',
            initial: true,
            active: 'yes',
            inactive: 'no',
          }
        : false,
    ].filter(Boolean),
    {
      onCancel: () => {
        process.exit();
      },
    }
  );

  library.tableTop(() => library.log('unicorn_face', 'Building your project'));

  /*****************************************************************************
   * WEBPACK CONFIGURATION
   ****************************************************************************/
  if (createExtendableWebpack) {
    moduleInstall('webpack-config', { log: false });

    library.log(
      'package',
      `Step (1 of 2) - ${chalk.blue(
        'Building extendable webpack configuration'
      )}`
    );
    fs.writeFileSync(
      path.join(process.cwd(), 'webpack.config.js'),
      `const Config = require('webpack-config').default;

module.exports = new Config().extend('@fesk/scripts/webpack').merge({
  /* Your config overrides go here */
});
`
    );
  } else if (alreadyHasWebpack === false) {
    library.log(
      'package',
      `Webpack - ${chalk.blue('Building default webpack configuration')}`
    );
    fs.writeFileSync(
      path.join(process.cwd(), 'webpack.config.js'),
      `
module.exports = require('@fesk/scripts/webpack');
`
    );
  }

  if (alreadyHasGitignore === false) {
    library.log('sparkles', `Git - ${chalk.blue('Adding gitignore')}`);
    fs.writeFileSync(
      path.join(process.cwd(), '.gitignore'),
      ['node_modules', 'dist'].join('\n')
    );
  }

  /*****************************************************************************
   * LINTING.
   ****************************************************************************/
  if (linting) {
    if (alreadyHasEslint === false) {
      library.log('sparkles', `Linting - ${chalk.blue('Adding eslint')}`);
      fs.writeFileSync(
        path.join(process.cwd(), '.eslintrc.js'),
        `
module.exports = require('@fesk/scripts/eslint');
`
      );
    }
    if (alreadyHasEslintIgnore === false) {
      library.log(
        'sparkles',
        `Linting - ${chalk.blue('Adding eslint ignore')}`
      );
      fs.writeFileSync(
        path.join(process.cwd(), '.eslintignore'),
        `
# Third party
**/node_modules

# Build products
dist/
`
      );
    }
    if (alreadyHasPrettier === false) {
      library.log(
        'sparkles',
        `Linting - ${chalk.blue('Adding prettier config')}`
      );
      fs.writeFileSync(
        path.join(process.cwd(), '.prettierrc'),
        `singleQuote: true\ntrailingComma: es5`
      );
    }
  }

  /*****************************************************************************
   * DEFAULT SITE.
   ****************************************************************************/

  if (!fs.existsSync(path.join(process.cwd(), 'src'))) {
    fs.mkdirSync(path.join(process.cwd(), 'src'));
  }
  if (!fs.existsSync(path.join(process.cwd(), 'src', 'nunjucks'))) {
    fs.mkdirSync(path.join(process.cwd(), 'src', 'nunjucks'));
  }
  if (
    !fs.existsSync(path.join(process.cwd(), 'src', 'nunjucks', 'index.twig')) &&
    !fs.existsSync(path.join(process.cwd(), 'src', 'nunjucks', 'index.njk'))
  ) {
    library.log('book', `Scripts - ${chalk.blue('Adding index page.')}`);
    fs.writeFileSync(
      path.join(process.cwd(), 'src', 'nunjucks', 'index.twig'),
      `---
title: FESK Scripts
---
<div class="container">
  <h1>FESK Scripts</h1>
  <p>
    Edit <code>./src/nunjucks/index.twig</code> and 
    <code>./src/index.js</code> to get started
  </p>
</div>
  `
    );
  }
  if (!fs.existsSync(path.join(process.cwd(), 'src', 'index.js'))) {
    library.log(
      'book',
      `Scripts - ${chalk.blue('Adding webpack entrypoint.')}`
    );
    fs.writeFileSync(
      path.join(process.cwd(), 'src', 'index.js'),
      `import './main.scss';\nconsole.log('Edit ./src/index.js to add JavaScript');\n`
    );
  }
  if (!fs.existsSync(path.join(process.cwd(), 'src', 'main.scss'))) {
    library.log('book', `Scripts - ${chalk.blue('Adding stylesheet.')}`);
    fs.writeFileSync(
      path.join(process.cwd(), 'src', 'main.scss'),
      `*, *:before, *:after { box-sizing: border-box; }
body, html {
  font-family: sans-serif;
}
.container { 
  max-width: 500px; 
  margin: 100px auto;
  h1 {
    color: #005cc5;
  }
  code {
    border: 1px solid #ddd;
    background: #eee;
  }
}
      `
    );
  }

  /*****************************************************************************
   * SCRIPTS.
   ****************************************************************************/

  library.log('book', `Scripts - ${chalk.blue('Adding fesk scripts.')}`);

  const packageJson = JSON.parse(
    fs.readFileSync(path.join(process.cwd(), 'package.json'))
  );

  packageJson.scripts = packageJson.scripts || {};
  packageJson.scripts.start = 'fesk-start';
  packageJson.scripts.build = 'fesk-build';
  packageJson.scripts.watch = 'fesk-watch';
  if (netlify) {
    library.log('sparkles', `Netlify - ${chalk.blue('Configuring netlify')}`);
    packageJson.scripts.preview =
      "fesk-build && netlifyctl deploy --draft -P 'dist' -m 'Local deployment preview'";
  }

  fs.writeFileSync(
    path.join(process.cwd(), 'package.json'),
    JSON.stringify(packageJson, null, 2)
  );

  library.tableFoot(() => library.log('unicorn_face', 'Completed your build.'));
})();
