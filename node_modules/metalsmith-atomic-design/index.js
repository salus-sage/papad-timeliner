const path = require('path');
const pluginKit = require('metalsmith-plugin-kit');
const copy = require('metalsmith-copy');
const fileMetadata = require('metalsmith-filemetadata');
const atomicCollections = require('./lib/atomic-collections');
const atomicDataLoader = require('./lib/atomic-data-loader');
const atomicTwigTemplates = require('./lib/atomic-twig-templates');

/**
 * Atomic design plugin.
 *
 * This plugin will do a few different things:
 *   - Copy selected directories
 *   - Load data from a configured folder
 *   - Create a collection for each that will be added to global metadata
 *   - Build twig partial templates using a provided layout
 *   - Make built templates available at a specified route (default: /pattern-library)
 *
 * It is intended to be a way to display individual components that make up a pattern library
 * for development purposes.
 *
 * @param opts
 * @returns {Function}
 */
function atomicDesignPlugin(opts) {
  const config = Object.assign(
    {
      layouts: 'lib/layouts',
      dataFolder: '_data',
      dataProperty: 'data',
      structure: ['atoms', 'molecules', 'organisms', 'pages'],
      ext: 'twig',
      defaultLayout: 'pattern-library.twig',
      route: 'pattern-library',
      order: 'name',
    },
    opts
  );

  return function(files, metalsmith, done) {
    return (async function() {
      config.reporter = metalsmith.twigVendors = {};

      await pluginKit.callFunction(atomicDataLoader(config), [
        files,
        metalsmith,
      ]);

      await pluginKit.callFunction(
        copy({
          pattern: 'lib/+(' + config.structure.join('|') + ')/**',
          transform: function(file) {
            return file.replace(/lib\//, config.route + '/');
          },
        }),
        [files, metalsmith]
      );

      await pluginKit.callFunction(atomicCollections(config), [
        files,
        metalsmith,
      ]);

      await pluginKit.callFunction(
        fileMetadata([
          {
            pattern: config.route + '/+(' + config.structure.join('|') + ')/**',
            metadata: { layout: config.layouts + '/' + config.defaultLayout },
          },
        ]),
        [files, metalsmith]
      );

      Object.keys(files).forEach(function(fileName) {
        files[fileName].paths = path.parse(fileName);
      });

      await pluginKit.callFunction(atomicTwigTemplates(config), [
        files,
        metalsmith,
      ]);

      done();
    })();
  };
}

module.exports = atomicDesignPlugin;
