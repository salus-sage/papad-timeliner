const collections = require('metalsmith-collections');
const pluginKit = require('metalsmith-plugin-kit');

/**
 * Atomic Collections
 *
 * Opinionated defaults for the metalsmith-collections plugin centered around
 * atomic design. By default it will add the following global properties to all templates:
 *   - atoms
 *   - molecules
 *   - components
 *   - pages
 *
 * These are lists of the files specified at lib/(atom|molecules|components|pages)/{name}.twig
 *
 * You will have access to all of the meta-data of these files, which you can use to render the files.
 * Depending which stage of the pipeline you render your templates, you may have access to the raw Twig
 * contents for a "view source" view for these files.
 *
 * This is useful when paired with the path module, which will add metadata which allows you to
 * navigate the URLs for these files in isolation. This is used in the pattern library examples.
 *
 * @param opts
 * @returns {Function}
 */
function atomicCollections(opts) {
  const config = pluginKit.defaultOptions(
    {
      useLib: true,
      lib: 'pattern-library/',
      structure: ['atoms', 'molecules', 'organisms', 'pages'],
      ext: 'twig',
      order: 'order',
    },
    opts
  );

  const fn = function(files, metalsmith, done) {
    // The structure will look something like this:
    /*
      {
        atoms: {
          pattern: 'pattern-library/atoms/*.twig',
          refer: true
        },
        molecules: {
          pattern: 'pattern-library/molecules/*.twig',
          refer: true
        },
        ...
      }
     */
    return collections(
      config.structure.reduce(function(acc, name) {
        acc[name] = {
          pattern: `${config.useLib ? config.lib : ''}${name}/**/*.${
            config.ext
          }`,
          sortBy: config.order,
          refer: true,
        };
        return acc;
      }, {})
    )(files, metalsmith, done);
  };

  pluginKit.renameFunction(fn, 'atomic-collections');

  return fn;
}

module.exports = atomicCollections;
