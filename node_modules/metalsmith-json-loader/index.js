const path = require('path');
const debug = require('debug')('metalsmith-json-loader');
const fs = require('fs-extra');
const pluginKit = require('metalsmith-plugin-kit');
const traverse = require('traverse');
const merge = require('lodash.merge');
const assign = require('lodash.assign');

const DEFAULT_CONFIG = {
  dataPath: 'data',
};

function resolve(filePath) {
  try {
    return require.resolve(filePath);
  } catch (e) {
    return null;
  }
}

function jsonLoaderPlugin(configuration) {
  const config = { ...DEFAULT_CONFIG, ...configuration };

  debug('Starting plugin with configuration', config);

  return pluginKit.middleware({
    each: async function(filename, fileObject, files, metalsmith) {
      if (!fileObject.$data) {
        debug(`${filename}: no $data object, skipping.`);
        return;
      }

      // We need to store futures, as traverse is synchronous
      const futures = [];
      traverse(fileObject.$data).forEach(function(filePath) {
        // Go through each leaf (file name)
        if (!this.isLeaf) return;

        // Put together some resolutions, filter out the nulls.
        const paths = [
          resolve(filePath),
          configuration.dataPath
            ? path.join(metalsmith._source, configuration.dataPath)
            : null,
          configuration.dataPath
            ? path.join(process.cwd(), 'src', configuration.dataPath)
            : null,
          path.join(process.cwd(), 'src', filePath),
        ].filter(Boolean);

        // Try to load each file in order using an async reducer.
        const loadedFile = paths.reduce(async (found, nextPath) => {
          if (await found) return found;
          const exists = fs.exists(nextPath);
          if (exists) {
            return await fs.readJson(nextPath);
          }
          return null;
        }, null);

        // Now we will have a value at some point, but we can async this.
        futures.push(
          loadedFile.then(async loaded => {
            // If we actually loaded something, update it
            if (loaded) {
              await this.update(loaded);
              // Add it back into the original object.
              assign(fileObject, merge(fileObject, fileObject.$data));
            }
          })
        );
      });

      // Wait for all files to be loaded.
      await Promise.all(futures);
    },
  });
}

module.exports = jsonLoaderPlugin;
