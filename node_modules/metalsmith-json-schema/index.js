const debug = require('debug')('metalsmith-json-schema');
const pluginKit = require('metalsmith-plugin-kit');
const fs = require('fs-extra');
const path = require('path');
const YAML = require('js-yaml');
const JsonRefs = require('json-refs');
const chalk = require('chalk');
const Ajv = require('ajv');

function yamlContentProcessor(res, callback) {
  callback(undefined, YAML.safeLoad(res.text));
}

function formatSchemaError(schema, name) {
  return function(error) {
    const missingProperty = error.params.missingProperty;
    if (missingProperty) {
      const schemaMissing = error.dataPath
        .slice(1)
        .split('.')
        .reduce(function(acc, dataPath) {
          return acc.properties ? acc.properties[dataPath] : acc[dataPath];
        }, schema.properties);
      if (
        schemaMissing &&
        schemaMissing.properties &&
        schemaMissing.properties[missingProperty]
      ) {
        error.params.missingPropertyDefinition =
          schemaMissing.properties[missingProperty];
      }
    }
    error.name = name;
    return error;
  };
}

function validateJson(ajv, schema, file, name) {
  ajv.validate(schema, file);
  debug('Validating file', file);

  if (ajv.errors) {
    debug('Found errors validating file', file);
    debug(ajv.errors);
    ajv.errors = (ajv.errors || []).map(formatSchemaError(schema, name));
    console.log(JSON.stringify(ajv.errors, null, 4));
  }
  return ajv.errors || [];
}

function reportErrors(name, desc, errors) {
  if (errors.length) {
    console.log(
      chalk.yellow('WARNING: ') +
        'Found ' +
        chalk.yellow(errors.length + ' errors') +
        ' while validating JSON examples'
    );
    console.log('File: ' + chalk.yellow(name) + ' ' + desc);
    errors.map(e => console.log(chalk.yellow(' => ') + e.message));
    console.log('');
  }
}

function schemaPlugin() {
  const ajv = new Ajv();
  debug('Starting plugin');

  return pluginKit.middleware({
    each: async function(filename, fileObject, files, metalsmith) {
      if (fileObject.$schema) {
        const schemaShortPath = fileObject.$schema;
        const schemaFileName = path.join(
          metalsmith._source,
          fileObject.$schema
        );
        const json = YAML.safeLoad(await fs.readFile(schemaFileName, 'utf-8'));
        const refs = await JsonRefs.resolveRefs(json.schema, {
          location: schemaFileName,
          loaderOptions: {
            processContent: yamlContentProcessor,
          },
        });
        fileObject.$schema = refs.resolved;

        if (fileObject) {
          // Validate data passed to file.
          const fileObjectErrors = validateJson(
            ajv,
            fileObject.$schema,
            fileObject.props || fileObject,
            filename
          );
          reportErrors(filename, 'in props field', fileObjectErrors);
          fileObject.exampleErrors = fileObject.exampleErrors
            ? fileObject.exampleErrors.concat(fileObjectErrors)
            : fileObjectErrors;
          debug(fileObject);
        }

        // Validate examples from schema
        if (json.examples) {
          const errors = json.examples.reduce(function(acc, v) {
            return acc.concat(
              validateJson(
                ajv,
                fileObject.$schema,
                v.props || v,
                schemaShortPath
              )
            );
          }, []);
          reportErrors(schemaShortPath, 'in the schema examples', errors);
          fileObject.jsonSchemaExampleErrors = fileObject.jsonSchemaExampleErrors
            ? fileObject.jsonSchemaExampleErrors.concat(errors)
            : errors;
          // We want to add examples to the file list.
          const fileNameWithoutExtension = filename
            .split('.')
            .slice(0, -1)
            .join('.');
          const extension = filename.split('.').slice(-1);
          json.examples.forEach(example => {
            const slug = example.slug
              ? example.slug
              : example.name.toLowerCase().replace(/ /g, '-');
            files[
              fileNameWithoutExtension + '/' + slug + '.' + extension
            ] = Object.assign({}, fileObject, {
              includeType: 'example',
              name: `${fileObject.name} - ${example.name}`,
              props: example.props,
            });
          });
        }
      }
    },
    match: '*.{twig,njk,hbs}',
    matchOptions: {
      basename: true,
    },
    name: 'json-schema',
  });
}

module.exports = schemaPlugin;
