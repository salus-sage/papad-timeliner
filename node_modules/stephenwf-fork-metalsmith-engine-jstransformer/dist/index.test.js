'use strict';

/* eslint-env jest */
/* eslint-disable import/no-extraneous-dependencies */

var Metalsmith = require('metalsmith');
var equal = require('assert-dir-equal');
var plugin = require('metalsmith-in-place');
var rimraf = require('rimraf');
var path = require('path');
var engine = require('./index');

describe('metalsmith-engine-jstransformer', function () {
  it('should transform matching files correctly', function (done) {
    var base = path.join(process.cwd(), 'test', 'fixtures', 'transform');
    var actual = path.join(base, 'build');
    var expected = path.join(base, 'expected');
    var metalsmith = new Metalsmith(base);

    rimraf.sync(actual);

    return metalsmith.use(plugin({ engine })).build(function (err) {
      if (err) throw err;
      expect(function () {
        return equal(actual, expected);
      }).not.toThrow();
      done();
    });
  });

  it('should transform files with multiple matching extensions correctly', function (done) {
    var base = path.join(process.cwd(), 'test', 'fixtures', 'transform-multiple');
    var actual = path.join(base, 'build');
    var expected = path.join(base, 'expected');
    var metalsmith = new Metalsmith(base);

    rimraf.sync(actual);

    return metalsmith.use(plugin({ engine })).build(function (err) {
      if (err) throw err;
      expect(function () {
        return equal(actual, expected);
      }).not.toThrow();
      done();
    });
  });

  it('should not transform files that do not have a matching transformer', function (done) {
    var base = path.join(process.cwd(), 'test', 'fixtures', 'not-transform');
    var actual = path.join(base, 'build');
    var expected = path.join(base, 'expected');
    var metalsmith = new Metalsmith(base);

    rimraf.sync(actual);

    return metalsmith.use(plugin({ engine })).build(function (err) {
      if (err) throw err;
      expect(function () {
        return equal(actual, expected);
      }).not.toThrow();
      done();
    });
  });

  it('should ignore binary files', function (done) {
    var base = path.join(process.cwd(), 'test', 'fixtures', 'ignore-binary');
    var actual = path.join(base, 'build');
    var expected = path.join(base, 'expected');
    var metalsmith = new Metalsmith(base);

    rimraf.sync(actual);

    return metalsmith.use(plugin({ engine })).build(function (err) {
      if (err) throw err;
      expect(function () {
        return equal(actual, expected);
      }).not.toThrow();
      done();
    });
  });
});